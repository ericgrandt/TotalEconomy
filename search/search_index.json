{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Download Total Economy Put the Total Economy jar file into the mods folder Start the server in order to initialize the configuration files An exception will be shown in the console since the database connection information is not set yet Add your database connection information to the Total Economy config file: Replace mysql with your preferred database. Check the Storage page to view supported databases. Replace DATABASENAME with the name of your database Set username and password If the database name you specified in the connection string does not exist, you'll have to create it first Start the server Note The following exception is expected when initializing Total Economy for the first time: HikariPool-1 - Exception during pool initialization . If you continue to receive this exception after adding your database connection information to the configuration file, make sure to double-check it and verify that it's correct. A good way to check if the information is correct is to attempt to connect to your database from another tool, such as DBeaver .","title":"Installation"},{"location":"storage/","text":"Total Economy relies on a database for storing user and plugin data. When first launched, assuming the connection string provided in the config is correct, the database will be initialized with the necessary objects needed by Total Economy. Supported Database MySQL ( jdbc:mysql )","title":"Storage"},{"location":"commands/balance/","text":"Balance Display the player's balance for the default currency. Note Support for non-default currencies is in the works Usage /balance [CURRENCY_NAME] Permission totaleconomy.command.balance","title":"Balance"},{"location":"commands/overview/","text":"Overview Arguments Command arguments are denoted by UPPERCASE words. Optional command arguments are surrounded with square brackets ( [] ). COMMAND_ARGUMENT - required argument [COMMAND_ARGUMENT] - optional argument Permissions Every command has a permission associated with it. In order to use these permissions, a permission plugin must be installed on your server.","title":"Overview"},{"location":"commands/pay/","text":"Pay Pay another player. Uses the default currency. Usage /pay PLAYER_NAME AMOUNT Permission totaleconomy.command.pay","title":"Pay"},{"location":"development/design/","text":"Total Economy uses the repository pattern. The primary reasoning behind this design pattern is it greatly simplifies unit testing by decoupling the business layer from the data access layer. As well as that, it makes the codebase easier to read and understand. One important thing to note with Total Economy is that we are not worried about entities being passed between all of the layers as this level of abstraction isn't necessary for a project of this size. Therefore, an entity created in the data access layer is passed to the service layer where it can then be passed to wherever it's needed such as a command or listener. Same thing in the opposite direction. Structure The data access layer is in the data package The service layer is in the services package The entities are in the domain package","title":"Design"},{"location":"development/testing/","text":"Testing Total Economy has multiple unit and integration tests to help ensure everything is functioning properly between releases. Every piece of code that gets added should be covered by unit tests, and if applicable, integration tests as well. There are some cases where this may not be worth the trouble. Each test, or test class, is tagged as either @Tag('Unit') or @Tag('Integration') in order to allow running only certain types of tests. Running Tests Tests don't require any extra setup to get running. Simply run ./gradlew test to run all of them, unit and integration.","title":"Testing"}]}